//练习1
class Cycle{
	public void ride(Cycle c){
		System.out.println("属于Cycle");
	}
}
class Unicycle extends Cycle{}
class Bicycle extends Cycle{}
class Tricycle extends Cycle{}
public class A150{
	public static void fun(Cycle c){
		c.ride(c);
	}
	public static void main(String[]args){
		Unicycle u=new Unicycle();
		Bicycle b=new Bicycle();
		Tricycle t=new Tricycle();
		fun(u);
		fun(b);
		fun(t);
	}
}
//练习2
import java.util.*;
class Shape{
	public void draw(){
	    System.out.println("Shape.draw()");
	}
	public void erase(){
	    System.out.println("Shape.erase()");
	}
}
class Circle extends Shape{
	@Override public void draw(){
	    System.out.println("Circle.draw()");
	}
	@Override public void erase(){
		System.out.println("Circle.erase()");
	}
}
class Square extends Shape{
	@Override public void draw(){
	    System.out.println("Square.draw()");
	}
	@Override public void erase(){
		System.out.println("Square.erase()");
	}
}
class Triangle extends Shape{
	@Override public void draw(){
	    System.out.println("Triangle.draw()");
	}
	@Override public void erase(){
		System.out.println("Triangle.erase()");
	}
}
class RandomShapeGenerator{
	private Random rand=new Random(47);
	public Shape next(){
		switch(rand.nextInt(3)){
	        default:
			case 0:return new Circle();
			case 1:return new Square();
			case 2:return new Triangle();
		}
	}
}
public class A153a{
	private static RandomShapeGenerator gen=new RandomShapeGenerator();
	public static void main(String[]args){
		Shape[]s=new Shape[9];
		for(int i=0;i<s.length;i++){
			s[i]=gen.next();
		}
		for(Shape sh:s){
			sh.draw();
		}
	}
}
//练习3
import java.util.*;
class Shape{
	public void draw(){
	    System.out.println("Shape.draw()");
	}
	public void erase(){
	    System.out.println("Shape.erase()");
	}
	public void print(){
		System.out.println("Hello World");
	}
}
class Circle extends Shape{
	@Override public void draw(){
	    System.out.println("Circle.draw()");
	}
	@Override public void erase(){
		System.out.println("Circle.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class Square extends Shape{
	@Override public void draw(){
	    System.out.println("Square.draw()");
	}
	@Override public void erase(){
		System.out.println("Square.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class Triangle extends Shape{
	@Override public void draw(){
	    System.out.println("Triangle.draw()");
	}
	@Override public void erase(){
		System.out.println("Triangle.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class RandomShapeGenerator{
	private Random rand=new Random(47);
	public Shape next(){
		switch(rand.nextInt(3)){
	        default:
			case 0:return new Circle();
			case 1:return new Square();
			case 2:return new Triangle();
		}
	}
}
public class A153b{
	private static RandomShapeGenerator gen=new RandomShapeGenerator();
	public static void main(String[]args){
		Shape[]s=new Shape[9];
		for(int i=0;i<s.length;i++){
			s[i]=gen.next();
		}
		for(Shape sh:s){
			sh.draw();
		}
	}
}
//练习4
import java.util.*;
class Shape{
	public void draw(){
	    System.out.println("Shape.draw()");
	}
	public void erase(){
	    System.out.println("Shape.erase()");
	}
	public void print(){
		System.out.println("Hello World");
	}
}
class Circle extends Shape{
	@Override public void draw(){
	    System.out.println("Circle.draw()");
	}
	@Override public void erase(){
		System.out.println("Circle.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class Square extends Shape{
	@Override public void draw(){
	    System.out.println("Square.draw()");
	}
	@Override public void erase(){
		System.out.println("Square.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class Triangle extends Shape{
	@Override public void draw(){
	    System.out.println("Triangle.draw()");
	}
	@Override public void erase(){
		System.out.println("Triangle.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class Rhombus extends Shape{
	@Override public void draw(){
	    System.out.println("Rhombus.draw()");
	}
	@Override public void erase(){
		System.out.println("Rhombus.erase()");
	}
	@Override public void print(){
		System.out.println("kuang zengwu");
	}
}
class RandomShapeGenerator{
	private Random rand=new Random(47);
	public Shape next(){
		switch(rand.nextInt(4)){
	        default:
			case 0:return new Circle();
			case 1:return new Square();
			case 2:return new Triangle();
			case 3:return new Rhombus();
		}
	}
}
public class A153c{
	private static RandomShapeGenerator gen=new RandomShapeGenerator();
	public static void main(String[]args){
		Shape[]s=new Shape[9];
		for(int i=0;i<s.length;i++){
			s[i]=gen.next();
		}
		for(Shape sh:s){
			sh.draw();
			sh.print();
		}
	}
}
//练习5
class Cycle{
	public void ride(Cycle c){
		System.out.println("属于Cycle");
	}
	public int wheels(){
		return 0;
	}
}
class Unicycle extends Cycle{
	public int wheels(){
		return 1;
	}
}
class Bicycle extends Cycle{
	public int wheels(){
		return 2;
	}
}
class Tricycle extends Cycle{
	public int wheels(){
		return 3;
	}
}
public class A153d{
	public static void fun(Cycle c){
		System.out.println(c.wheels());
	}
	public static void main(String[]args){
		Unicycle u=new Unicycle();
		Bicycle b=new Bicycle();
		Tricycle t=new Tricycle();
		fun(u);
		fun(b);
		fun(t);
	}
}
//练习6
enum Note{
	MIDDLE_C,C_SHARP,B_FLAT;
}
class Instrument{
	void play(Note n){
		System.out.println("Instrument.play()"+n);
	}
	public String toString(){
		return "Instrument";
	}
	void adjust(){
		System.out.println("Adjusting Instrument");
	}
}
class Wind extends Instrument{
	void play(Note n){
		System.out.println("Wind.play()"+n);
	}
	public String toString(){
		return "Wind";
	}
	void adjust(){
		System.out.println("Adjusting Wind");
	}
}
class Percussion extends Instrument{
	void play(Note n){
		System.out.println("Percussion.play()"+n);
	}
	public String toString(){
		return "Percussion";
	}
	void adjust(){
		System.out.println("Adjusting Percussion");
	}
}
class Stringed extends Instrument{
	void play(Note n){
		System.out.println("Stringed.play()"+n);
	}
	public String toString(){
		return "Stringed";
	}
	void adjust(){
		System.out.println("Adjusting Stringed");
	}
}
class Brass extends Wind{
	void play(Note n){
		System.out.println("Brass.play()"+n);
	}
	void adjust(){
		System.out.println("Adjusting Brass");
	}
}
class Woodwind extends Wind{
	void play(Note n){
		System.out.println("Woodwind.play()"+n);
	}
	public String toString(){
		return "Woodwind";
	}
}
public class A155a{
	public static void tune(Instrument i){
		i.play(Note.MIDDLE_C);
	}
	public static void tuneAll(Instrument[]e){
		for(Instrument in:e){
			System.out.println(in);
		}
	}
	public static void main(String[]args){
		Instrument[]orchestra={new Wind(),new Percussion(),new Stringed(),new Brass(),new Woodwind()};
		tuneAll(orchestra);
	}
}
//练习7
enum Note{
	MIDDLE_C,C_SHARP,B_FLAT;
}
class Instrument{
	void play(Note n){
		System.out.println("Instrument.play()"+n);
	}
	public String toString(){
		return "Instrument";
	}
	void adjust(){
		System.out.println("Adjusting Instrument");
	}
}
class Wind extends Instrument{
	void play(Note n){
		System.out.println("Wind.play()"+n);
	}
	public String toString(){
		return "Wind";
	}
	void adjust(){
		System.out.println("Adjusting Wind");
	}
}
class Percussion extends Instrument{
	void play(Note n){
		System.out.println("Percussion.play()"+n);
	}
	public String toString(){
		return "Percussion";
	}
	void adjust(){
		System.out.println("Adjusting Percussion");
	}
}
class Stringed extends Instrument{
	void play(Note n){
		System.out.println("Stringed.play()"+n);
	}
	public String toString(){
		return "Stringed";
	}
	void adjust(){
		System.out.println("Adjusting Stringed");
	}
}
class FlipDial extends Instrument{ //新的类型Instrument
	void play(Note n){
		System.out.println("FlipDial.play()"+n);
	}
	public String toString(){
		return "FlipDial";
	}
	void adjust(){
		System.out.println("Adjusting FlipDial");
	}
}
class Brass extends Wind{
	void play(Note n){
		System.out.println("Brass.play()"+n);
	}
	void adjust(){
		System.out.println("Adjusting Brass");
	}
}
class Woodwind extends Wind{
	void play(Note n){
		System.out.println("Woodwind.play()"+n);
	}
	public String toString(){
		return "Woodwind";
	}
}
public class A155b{
	public static void tune(Instrument i){
		i.play(Note.MIDDLE_C);
	}
	public static void tuneAll(Instrument[]e){
		for(Instrument in:e){
			System.out.println(in);
		}
	}
	public static void main(String[]args){
		Instrument[]orchestra={new Wind(),new Percussion(),new Stringed(),new Brass(),new Woodwind(),new FlipDial()};
		tuneAll(orchestra);
	}
}
//练习8
import java.util.*;
enum Note{
	MIDDLE_C,C_SHARP,B_FLAT;
}
class Instrument{
	void play(Note n){
		System.out.println("Instrument.play()"+n);
	}
	public String toString(){
		return "Instrument";
	}
	void adjust(){
		System.out.println("Adjusting Instrument");
	}
}
class Wind extends Instrument{
	void play(Note n){
		System.out.println("Wind.play()"+n);
	}
	public String toString(){
		return "Wind";
	}
	void adjust(){
		System.out.println("Adjusting Wind");
	}
}
class Percussion extends Instrument{
	void play(Note n){
		System.out.println("Percussion.play()"+n);
	}
	public String toString(){
		return "Percussion";
	}
	void adjust(){
		System.out.println("Adjusting Percussion");
	}
}
class Stringed extends Instrument{
	void play(Note n){
		System.out.println("Stringed.play()"+n);
	}
	public String toString(){
		return "Stringed";
	}
	void adjust(){
		System.out.println("Adjusting Stringed");
	}
}
class FlipDial extends Instrument{ //新的类型Instrument
	void play(Note n){
		System.out.println("FlipDial.play()"+n);
	}
	public String toString(){
		return "FlipDial";
	}
	void adjust(){
		System.out.println("Adjusting FlipDial");
	}
}
class Brass extends Wind{
	void play(Note n){
		System.out.println("Brass.play()"+n);
	}
	void adjust(){
		System.out.println("Adjusting Brass");
	}
}
class Woodwind extends Wind{
	void play(Note n){
		System.out.println("Woodwind.play()"+n);
	}
	public String toString(){
		return "Woodwind";
	}
}
class RandomInstrument{
	private Random rand=new Random(47);
	public Instrument next(){
		switch(rand.nextInt(6)){
			default:
			case 0:return new FlipDial();
			case 1:return new Wind();
			case 2:return new Percussion();
			case 3:return new Stringed();
			case 4:return new Brass();
			case 5:return new Woodwind();
		}
	}
}
public class A155c{
	public static void tune(Instrument i){
		i.play(Note.MIDDLE_C);
	}
	public static void tuneAll(Instrument[]e){
		for(Instrument in:e){
			System.out.println(in);
		}
	}
	public static void main(String[]args){
		RandomInstrument r=new RandomInstrument();
		Instrument[]or=new Instrument[6];
		for(int i=0;i<or.length;i++){
			or[i]=r.next();
		}
		tuneAll(or);
	}
}
//练习9
class Rodent{
	public void beat(){
		System.out.println("Rodent.beat()");
	}
}
class Mouse extends Rodent{
	public void beat(){
		System.out.println("Mouse.beat()");
	}
}
class Gerbil extends Rodent{
	public void beat(){
		System.out.println("Gerbil.beat()");
	}
}
class Hamster extends Rodent{
	public void beat(){
		System.out.println("Hamster.beat()");
	}
}
public class A155d{
	public static void main(String[]args){
		Rodent[]r={new Mouse(),new Gerbil(),new Hamster()};
		for(Rodent rodent:r){
			rodent.beat();
		}
	}
}
//练习10
class Father{
	public void go(){
		eat();
		System.out.println("走走走走走啊走");
	}
	public void eat(){
		System.out.println("我吃吃吃吃吃吃吃");
	}
}
public class A155e extends Father{
	public void eat(){
		System.out.println("太甜了");
	}
	public static void main(String[]args){
		Father t=new A155e();
		t.go();
	}
}
