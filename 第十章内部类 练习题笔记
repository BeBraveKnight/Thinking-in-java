//练习1
class Outer{
	class Inner{
		public void go(){
			System.out.println("kuangzengwu");
		}
	}
	public Inner fun(){
		return new Inner();
	}
}
public class A191{
	public static void main(String[]args){
		Outer.Inner a=new Outer().fun();
		a.go();
	}
}
//练习2
class B{
	String str;
	public B(String str){
		this.str=str;
	}
	public String toString(){
		return str;
	}
}
interface Selector{
	boolean end();
	Object current();
	void next();
}
public class A192{
	private Object[]items;
	private int next=0;
	public void fun(){
		System.out.println("kuangzengwu");
	}
	public A192(int size){
		items=new Object[size];
	}
	public void add(Object x){
		if(next<items.length){
			items[next++]=x;
		}
	}
	private class SequenceSelector implements Selector{
		private int i=0;
		public boolean end(){
			return i==items.length;
		}
		public Object current(){
			return items[i];
		}
		public void next(){
			if(i<items.length){
				i++;
			}
		}
	}
	public Selector selector(){
		return new SequenceSelector();
	}
	public static void main(String[]args){
		A192 sequence=new A192(14);
		B b1=new B("kuang");
		B b2=new B("zeng");
		B b3=new B("wu");
		B b4=new B("fanliman");
		for(int i=0;i<10;i++){
			sequence.add(Integer.toString(i));
		}
		sequence.add(b1);
		sequence.add(b2);
		sequence.add(b3);
		sequence.add(b4);
		Selector selector=sequence.selector();
		while(!selector.end()){
			System.out.print(selector.current()+" ");
			selector.next();
		}
	}
}
//练习3
class Outer{
	private String s;
	public Outer(String s){
		this.s=s;
	}
	class Inner{
		public void go(){
			System.out.println("kuangzengwu");
		}
		public String toString(){
			return s;
		}
	}
	public Inner fun(){
		return new Inner();
	}
}
public class A193{
	public static void main(String[]args){
		Outer.Inner a=new Outer("hello").fun();
		System.out.println(a);
	}
}
//练习4
class B{
	String str;
	public B(String str){
		this.str=str;
	}
	public String toString(){
		return str;
	}
}
interface Selector{
	boolean end();
	Object current();
	void next();
}
public class A194a{
	private Object[]items;
	private int next=0;
	public void fun(){
		System.out.println("kuangzengwu");
	}
	public A194a(int size){
		items=new Object[size];
	}
	public void add(Object x){
		if(next<items.length){
			items[next++]=x;
		}
	}
	private class SequenceSelector implements Selector{
		private int i=0;
		public boolean end(){
			return i==items.length;
		}
		public Object current(){
			return items[i];
		}
		public void next(){
			if(i<items.length){
				i++;
			}
		}
		public A194a getSequence(){
			return A194a.this;
		}
	}
	public Selector selector(){
		return new SequenceSelector();
	}
	public static void main(String[]args){
		A194a sequence=new A194a(14);
		B b1=new B("kuang");
		B b2=new B("zeng");
		B b3=new B("wu");
		B b4=new B("fanliman");
		for(int i=0;i<10;i++){
			sequence.add(Integer.toString(i));
		}
		sequence.add(b1);
		sequence.add(b2);
		sequence.add(b3);
		sequence.add(b4);
		Selector selector=sequence.selector();
		while(!selector.end()){
			System.out.print(selector.current()+" ");
			selector.next();
		}
		A194a.SequenceSelector s1=sequence.new SequenceSelector();
		s1.getSequence().fun();
	}
}
//练习5
class Outer{
	class Inner{
		public Inner(){
			System.out.println("hello world");
		}
	}
}
public class A194b{
	public static void main(String[]args){
        Outer out=new Outer();
		Outer.Inner inner=out.new Inner();
	}
}
//练习6
/*package myPackage;
public interface A195Test{
	void fun();
}*/
/*package access;
import myPackage.*;
public class A195Test2{
	protected class A implements A195Test{
		public void fun(){}
	}
}*/
import access.*;
import myPackage.*;
public class A195a extends A195Test2{
	public A195Test get(){
		return new A();//protected只给予了包访问权
	}
}
//练习7
public class A195b{
	private int a=10;
	private void fun(){
		System.out.println("hello");
	}
	public Inner get(){
		return new Inner();
	}
	class Inner{
		public void set(int x){
			a=x;
			fun();
		}
	}
	public static void main(String[]args){
		A195b abc=new A195b();
		abc.get().set(303);
		System.out.println(abc.a);
	}
}
//练习8
public class A195c{
	private int a=10;
	private void fun(){
		System.out.println("hello");
	}
	public Inner get(){
		return new Inner();
	}
	class Inner{
		private String s="kuang";
		public void set(int x){
			a=x;
			fun();
		}
	}
	public static void main(String[]args){
		A195c abc=new A195c();
		abc.get().set(303);
		System.out.println(abc.a);
		//System.out.println(abc.s);不能直接访问，必须要通过创建内部类实例
	}
}
//练习9
interface A{
	public void fun();
}
public class A196a{
	public A getA(){
		class B implements A{
			public void fun(){
				System.out.println("hello");
			}
		}
		return new B();
	}
	public static void main(String[]args){
		A196a abc=new A196a();
		A a=abc.getA();
		a.fun();
	}
}
//练习10
interface A{
	public void fun();
}
public class A196b{
	int i=10;
	public A getA(){
		if(i>9){
		    class B implements A{
			    public void fun(){
				    System.out.println("hello world");
				}
			}
		    return new B();
		}else{
			return null;
		}
	}
	public static void main(String[]args){
		A196b abc=new A196b();
		A a=abc.getA();
		a.fun();
	}
}
//练习11
interface B{
	public void fun();
}
class Test{
	private class T implements B{
		public void fun(){
			System.out.println("hello world");
		}
	}
	public B getT(){
		return new T();
	}
}
public class A196c{
	public static void main(String[]args){
		B b=new Test().getT();
		b.fun();
		//T t=(T)b;
		//t.fun();
	}
}
//练习12
interface Inner{
	void set(int x);
}
public class A199a{
	private int a=10;
	private void fun(){
		System.out.println("hello");
	}
	public Inner get(){
		return new Inner(){
		    private String s="kuang";
		    public void set(int x){
			    a=x;
			    fun();
			}
		};
	}
	public static void main(String[]args){
		A199a abc=new A199a();
		Inner inner=abc.get();
		inner.set(304);
		System.out.println(abc.a);
	}
}
//练习13
interface A{
	public void fun();
}
public class A199b{
	public A getA(){
		return new A(){
			public void fun(){
				System.out.println("hello");
			}
		};
	}
	public static void main(String[]args){
		A199b abc=new A199b();
		A a=abc.getA();
		a.fun();
	}
}
//练习14
interface Monster{
	void menace();
}
interface DangerousMonster extends Monster{
	void destroy();
}
interface Lethal{
	void kill();
}

interface Vampire extends DangerousMonster,Lethal{
	void drinkBlood();
}

public class HorrorShow{
	public DangerousMonster getD(){
        return new DangerousMonster(){
	        public void menace(){System.out.println("kuang");}
	        public void destroy(){System.out.println("zeng");}
	    };
    }
	public Vampire getV(){
        return new Vampire(){
	        public void menace(){System.out.println("wu");}
	        public void destroy(){System.out.println("fan");}
	        public void kill(){System.out.println("li");}
	        public void drinkBlood(){System.out.println("man");}
        };
    }
	static void u(Monster b){b.menace();}
	static void v(DangerousMonster d){
		d.menace();
		d.destroy();
	}
	static void w(Lethal l){l.kill();}
	public static void main(String[]args){
		HorrorShow h=new HorrorShow();
		DangerousMonster barney=h.getD();
		u(barney);
		v(barney);
		Vampire vlad=h.getV();
		u(vlad);
		v(vlad);
		w(vlad);
	}
}
//练习15
class A199ccc{
	int i;
	public A199ccc(int i){
		this.i=i;
	}
	public void fun(){};
}
public class A199d{
	public A199ccc get(int x){
		return new A199ccc(x){
			public void fun(){System.out.println("hello world");}
		};
	}
	public static void main(String[]args){
        A199ccc a=new A199d().get(20);
		a.fun();
	}
}
//练习16
interface Cycle{
	void go();
}
interface Factory{
	Cycle getCycle();
}
class Unicycle implements Cycle{
	public void go(){
		System.out.println("Unicycle");
	}
	public static Factory f=new Factory(){
		public Cycle getCycle(){
			return new Unicycle();
		}
    };
}
class Bicycle implements Cycle{
	public void go(){
		System.out.println("Bicycle");
	}
	public static Factory f=new Factory(){
		public Cycle getCycle(){
			return new Bicycle();
		}
    };
}
class Tricycle implements Cycle{
	public void go(){
		System.out.println("Tricycle");
	}
	public static Factory f=new Factory(){
		public Cycle getCycle(){
			return new Tricycle();
		}
    };
}
public class A201a{
	public static void fun(Factory fact){
        Cycle c=fact.getCycle();
		c.go();
	}
	public static void main(String[]args){
		fun(Bicycle.f);
		fun(Unicycle.f);
		fun(Tricycle.f);
	}
}
//练习17
interface Game{
	void throwing();
}
interface GameFactory{
	Game getGame();
}
class Coin implements Game{
	public void throwing(){
		for(int i=0;i<6;i++){
	      int a=(int)(Math.random()*2);
		  if(a==1){
			System.out.println("第"+i+"次:正面");
		  }else{
			  System.out.println("第"+i+"次:反面");
		  }
		}
	}
	public static GameFactory g=new GameFactory(){
		public Game getGame(){
			return new Coin();
		}
	};
}
class Dice implements Game{
	public void throwing(){
		for(int i=0;i<6;i++){
			int a=(int)(Math.random()*6+1);
			System.out.println("第"+i+"次:"+a+"点");
		}
	}
	public static GameFactory g=new GameFactory(){
		public Game getGame(){
			return new Dice();
		}
	};
}
public class A201b{
	public static void funny(GameFactory f){
		Game g=f.getGame();
		g.throwing();
	}
	public static void main(String[]args){
		funny(Coin.g);
		funny(Dice.g);
	}
}
//练习18
