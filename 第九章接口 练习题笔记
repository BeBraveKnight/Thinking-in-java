//练习1
abstract class Rodent{
	public abstract void beat();
}
class Mouse extends Rodent{
	public void beat(){
		System.out.println("Mouse.beat()");
	}
}
class Gerbil extends Rodent{
	public void beat(){
		System.out.println("Gerbil.beat()");
	}
}
class Hamster extends Rodent{
	public void beat(){
		System.out.println("Hamster.beat()");
	}
}
public class A171a{
	public static void main(String[]args){
		Rodent[]r={new Mouse(),new Gerbil(),new Hamster()};
		for(Rodent rodent:r){
			rodent.beat();
		}
	}
}
//练习2
abstract class A{}
public class A171b{
	public static void main(String[]args){
		//new A();
	}
}
//练习3
abstract class Father{
	public Father(){
		print();
	}
	abstract public void print();
}//初始化的实际过程：1、在其他任何事物发生之前，将分配给对象的存储空间初始化成二进制的0
public class A171c extends Father{
	private int i=34;
	public void print(){
		System.out.println(i);
	}
	public static void main(String[]args){
		A171c t=new A171c();
		t.print();
	}
}
//练习4
abstract class Father{
	public void fun(){};
}
public class A172 extends Father{
	public void fun(){
		System.out.println("hello");
	}
	public A172(){
		System.out.print("kuang");
	}
	public static void go(Father f){
		A172 a=(A172)f;
		a.fun();
	}
	public static void main(String[]args){
		new A172().go(new A172());
	}
}
//练习5
/*package myPackage;
public interface TestA174{
	void f1();
	void f2();
	void f3();
}*/
import myPackage.*;
public class A174a implements TestA174{
	public void f1(){
		System.out.println("f1()");
	}
	public void f2(){
		System.out.println("f2()");
	}
	public void f3(){
		System.out.println("f3()");
	}
	public static void main(String[]args){
		A174a a=new A174a();
		a.f1();
		a.f2();
		a.f3();
	}
}
//练习6
interface A{
	void fun();
}
public class A174b implements A{
	void fun(){}//正在尝试分配更低的访问权限，以前为public
	public static void main(String[]args){
	}
}
//练习7
interface Rodent{
	public void beat();
}
class Mouse implements Rodent{
	public void beat(){
		System.out.println("Mouse.beat()");
	}
}
class Gerbil implements Rodent{
	public void beat(){
		System.out.println("Gerbil.beat()");
	}
}
class Hamster implements Rodent{
	public void beat(){
		System.out.println("Hamster.beat()");
	}
}
public class A174c{
	public static void main(String[]args){
		Rodent[]r={new Mouse(),new Gerbil(),new Hamster()};
		for(Rodent rodent:r){
			rodent.beat();
		}
	}
}
//练习8
interface FastFood{
	void fun();
}
class Meal {
    Meal() { System.out.println("Meal()"); }
}
class Bread {
    Bread() { System.out.println("Bread()"); }
}
class Cheese {
    Cheese() { System.out.println("Cheese()"); }
}
class Lettuce {
    Lettuce() { System.out.println("Lettuce()"); }
}
class Lunch extends Meal {
    Lunch() { System.out.println("Lunch()"); }
}
class PortableLunch extends Lunch {
    PortableLunch() { System.out.println("PortableLunch()");}
}
public class Sandwich implements FastFood {
	public void fun(){};
    private Bread b = new Bread();
    private Cheese c = new Cheese();
    private Lettuce l = new Lettuce();
    public Sandwich() { System.out.println("Sandwich()"); }
    public static void main(String[] args) {
        new Sandwich();
	}
}
//练习9
enum Note{
	MIDDLE_C,C_SHARP,B_FLAT;
}
abstract class Instrument{
	int VALUE=5;
	public abstract void play(Note n);
	public String toString(){
		return "hello";
	}
	public abstract void adjust();
}
class Wind extends Instrument{
    public void play(Note n) {
        System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Wind"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
}
class Percussion extends Instrument{
    public void play(Note n) {
    System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Percussion"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
    }
class Stringed extends Instrument{
    public void play(Note n) {
    System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Stringed"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
    }
class Brass extends Wind {
    public String toString() { return "Brass"; }
    }
class Woodwind extends Wind {
    public String toString() { return "Woodwind"; }
}
public class A174e{
    static void tune(Instrument i) {
        i.play(Note.MIDDLE_C);
	}
    static void tuneAll(Instrument[] e) {
        for(Instrument i : e)
            tune(i);
	}
    public static void main(String[] args) {
        Instrument[] orchestra = {new Wind(),new Percussion(),new Stringed(),new Brass(),new Woodwind()};
        tuneAll(orchestra);
	}
}
//练习10
interface Playable{
	void play(Note n); 
}
interface Instrument {
    int VALUE = 5;
    void adjust();
}
class Wind implements Instrument,Playable {
    public void play(Note n) {
        System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Wind"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
}
class Percussion implements Instrument,Playable {
    public void play(Note n) {
    System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Percussion"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
    }
class Stringed implements Instrument,Playable {
    public void play(Note n) {
    System.out.println(this + ".play() " + n);
    }
    public String toString() { return "Stringed"; }
    public void adjust() { System.out.println(this + ".adjust()"); }
    }
class Brass extends Wind {
    public String toString() { return "Brass"; }
    }
class Woodwind extends Wind {
    public String toString() { return "Woodwind"; }
}
public class A174f{
    static void tune(Playable i) {
        i.play(Note.MIDDLE_C);
    }
    static void tuneAll(Playable[] e) {
        for(Playable i : e)
            tune(i);
	}
    public static void main(String[] args) {
        Playable[] orchestra = {new Wind(),new Percussion(),new Stringed(),new Brass(),new Woodwind()};
        tuneAll(orchestra);
	}
}
//练习11
class Apply{
	public static void process(Processor p,Object s){
		System.out.println("Using Processor "+p.name());
		System.out.println(p.process(s));
	}
}
interface Processor{
	String name();
	Object process(Object input);
}
class A{
	public String name(){
		return "A";
	}
	public String process(String s){
		char[]c=s.toCharArray();
		if(c.length%2==0){
			for(int x=0;x<c.length;x+=2){
				char t=c[x];
				c[x]=c[x+1];
				c[x+1]=t;
			}
			return String.valueOf(c);
		}else{
			for(int x=0;x<c.length-1;x+=2){
				char t=c[x];
				c[x]=c[x+1];
				c[x+1]=t;
			}
			return String.valueOf(c);
		}
	}
}
class StringProcessor implements Processor{
	A a;
	public StringProcessor(A a){
		this.a=a;
	}
	public String name(){return a.name();}
	public String process(Object input){
		return a.process((String)input);
	}
}
public class A178{
	public static void main(String[]args){
		Apply.process(new StringProcessor(new A()),"helloworld!");
	}
}
//练习12
interface CanClimb{
	void climb();
}
interface CanFight{
	void fight();
}
interface CanSwim{
	void swim();
}
interface CanFly{
	void fly();
}
class ActionCharacter{
	public void fight(){};
}
class Hero extends ActionCharacter implements CanFight,CanSwim,CanFly,CanClimb{
	public void swim(){}
	public void fly(){}
	public void climb(){}
}
public class A179{
	public static void t(CanFight x){
			x.fight();
	}
	public static void u(CanSwim x){
			x.swim();
	}
	public static void v(CanFly x){
			x.fly();
	}
	public static void c(CanClimb x){
			x.climb();
	}
	public static void w(ActionCharacter x){
			x.fight();
	}
	public static void main(String[]args){
		Hero h=new Hero();
		t(h);
		u(h);
		v(h);
		w(h);
		c(h);
	}
}
//练习13
interface A{}
interface B extends A{}
interface C extends A{}
interface D extends B,C{}
public class A180 implements D{
	public static void main(String[]args){
		System.out.println("hello");
	}
}
//练习14
interface A1{
	void fun1();
	void go1();
}
interface A2{
	void fun2();
	void go2();
}
interface A3{
	void fun3();
	void go3();
}
interface B extends A1,A2,A3{
	void print();
}
class Father{
	public void done(){
		System.out.println("Father's done()");
	}
}
class Son extends Father implements B{
    public void done(){
		System.out.println("done");
	}
	public void print(){
		System.out.println("print");
	}
	public void fun1(){
		System.out.println("fun1");
	}
	public void fun2(){
		System.out.println("fun2");
	}
	public void fun3(){
		System.out.println("fun3");
	}
	public void go1(){
		System.out.println("go1");
	}
	public void go2(){
		System.out.println("go2");
	}
	public void go3(){
		System.out.println("go3");
	}
}
public class A181a{
	public static void k(A1 x){
		x.fun1();
	}
	public static void m(A2 x){
		x.fun2();
	}
	public static void u(A3 x){
		x.fun3();
	}
	public static void n(B x){
		x.print();
	}
	public static void main(String[]args){
		Son s=new Son();
		k(s);
		m(s);
		u(s);
		n(s);
	}
}
//练习15
interface A1{
	void fun1();
	void go1();
}
interface A2{
	void fun2();
	void go2();
}
interface A3{
	void fun3();
	void go3();
}
interface B extends A1,A2,A3{
	void print();
}
abstract class Father{
	public void done(){}
}
class Son extends Father implements B{
    public void done(){
		System.out.println("done");
	}
	public void print(){
		System.out.println("print");
	}
	public void fun1(){
		System.out.println("fun1");
	}
	public void fun2(){
		System.out.println("fun2");
	}
	public void fun3(){
		System.out.println("fun3");
	}
	public void go1(){
		System.out.println("go1");
	}
	public void go2(){
		System.out.println("go2");
	}
	public void go3(){
		System.out.println("go3");
	}
}
public class A181b{
	public static void k(A1 x){
		x.fun1();
	}
	public static void m(A2 x){
		x.fun2();
	}
	public static void u(A3 x){
		x.fun3();
	}
	public static void n(B x){
		x.print();
	}
	public static void main(String[]args){
		Son s=new Son();
		k(s);
		m(s);
		u(s);
		n(s);
	}
}
//练习16
import java.nio.*;
import java.util.*;
class RandomChar{
	private static Random rand=new Random(47);
	public char next(){
		return (char)rand.nextInt(128);
	}
}
public class A183 extends RandomChar implements Readable{
	private int count;
	public A183(int count){
		this.count=count;
	}
	public int read(CharBuffer cb){
		if(count--==0){
			return -1;
		}
		String s=Character.toString(next())+" ";
		cb.append(s);
		return s.length();
	}
	public static void main(String[]args){
		Scanner scan=new Scanner(new A183(8));
		while(scan.hasNext()){
			System.out.println(scan.next()+" ");
		}
	}
}
//练习17
interface A{
	int fal=40;
}
class B implements A{
	public void go(){
	    System.out.println(fal++);
	    System.out.println(fal++);
	}
}
public class A184{
	public static void main(String[]args){
		new B().go();
	}
}
//练习18
interface Cycle{
	void go();
}
interface Factory{
	Cycle getCycle();
}
class Unicycle implements Cycle{
	public void go(){
		System.out.println("Unicycle");
	}
}
class UnicycleFactory implements Factory {
	public Cycle getCycle(){
		return new Unicycle();
	}
}
class Bicycle implements Cycle{
	public void go(){
		System.out.println("Bicycle");
	}
}
class BicycleFactory implements Factory {
	public Cycle getCycle(){
		return new Bicycle();
	}
}
class Tricycle implements Cycle{
	public void go(){
		System.out.println("Tricycle");
	}
}
class TricycleFactory implements Factory {
	public Cycle getCycle(){
		return new Tricycle();
	}
}
public class A188a{
	public static void fun(Factory fact){
        Cycle c=fact.getCycle();
		c.go();
	}
	public static void main(String[]args){
		fun(new BicycleFactory());
		fun(new UnicycleFactory());
	}
}
//练习19
interface Game{
	void throwing();
}
interface GameFactory{
	Game getGame();
}
class Coin implements Game{
	public void throwing(){
		for(int i=0;i<6;i++){
	      int a=(int)(Math.random()*2);
		  if(a==1){
			System.out.println("第"+i+"次:正面");
		  }else{
			  System.out.println("第"+i+"次:反面");
		  }
		}
	}
}
class CoinFactory implements GameFactory{
	public Game getGame(){
		return new Coin();
	}
}
class Dice implements Game{
	public void throwing(){
		for(int i=0;i<6;i++){
			int a=(int)(Math.random()*6+1);
			System.out.println("第"+i+"次:"+a+"点");
		}
	}
}
class DiceFactory implements GameFactory{
	public Game getGame(){
		return new Dice();
	}
}
public class A188b{
	public static void funny(GameFactory f){
		Game g=f.getGame();
		g.throwing();
	}
	public static void main(String[]args){
		funny(new CoinFactory());
		funny(new DiceFactory());
	}
}
